name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js (Frontend tests)
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

      - name: Set up Node.js (Backend tests)
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Create Backend .env file
        run: |
          cd backend
          echo "PORT=${{ secrets.PORT }}" > .env
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "SECRET=${{ secrets.SECRET }}" >> .env

  deploy-backend:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_URL }}

      - name: Build Docker image
        run: |
          cd backend
          docker build -t backend-preview:${{ github.event.number }} .

      - name: Push Docker image to ECR
        run: |
          docker tag backend-preview:${{ github.event.number }} \
            ${{ secrets.ECR_REPO_URL }}:pr-${{ github.event.number }}
          docker push ${{ secrets.ECR_REPO_URL }}:pr-${{ github.event.number }}

      - name: Deploy Backend to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}

      - name: Get Backend Public URL from ECS
        id: get-backend-url
        run: |
          TASK_ARN=$(aws ecs list-tasks \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service-name ${{ secrets.ECS_SERVICE_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --query "taskArns[0]" \
            --output text)

          if [ -n "$TASK_ARN" ]; then
            ENI_ID=$(aws ecs describe-tasks \
              --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
              --tasks $TASK_ARN \
              --region ${{ secrets.AWS_REGION }} \
              --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value" \
              --output text)
            
            BACKEND_URL=$(aws ec2 describe-network-interfaces \
              --network-interface-ids $ENI_ID \
              --region ${{ secrets.AWS_REGION }} \
              --query "NetworkInterfaces[0].Association.PublicIp" \
              --output text)
            
            echo "backend_url=http://$BACKEND_URL:5000" >> $GITHUB_OUTPUT
          else
            echo "No tasks found for the service"
            exit 1
          fi

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Inject Backend URL into .env
        run: |
          cd frontend
          echo "VITE_BASE_URL=${{ steps.get-backend-url.outputs.backend_url }}" > .env

      - name: Deploy to Vercel
        id: deploy-to-vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          cd frontend
          vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
          vercel build --token=$VERCEL_TOKEN
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=$VERCEL_TOKEN)
          echo "preview_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Post preview link in PR comment
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview available at: ${{ steps.deploy-to-vercel.outputs.preview_url }}`
            })
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
